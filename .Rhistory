#This is a test... Hope I got it lol
> #This is a test... Hope I got it lol
>#This is a test... Hope I got it lol
#this is a test
library(ggplot2)
library(tidyverse)
library(features)
pseed <- read_csv("pseed.fin.amps.csv")
pseed.bl <- read_csv("pseed.lengths.csv")
speeds <- read_csv("pseed.calibration.csv")
## Import data and libraries
pseed.wide <- pseed %>%
left_join(speeds,by=c("speed"="vol"))%>%
left_join(pseed.bl,by="fish")%>%
mutate(bl.s=cm.s/bl)%>%
select(-amp)%>%
pivot_wider(names_from = fin,values_from = amp.bl) %>%
mutate(amp.sum=L+R)
##Joining data
find.peaks <- function(x,y,mult=100)
{
f <- fget(features(x = x,y=y*mult))[2:3]%>%
as_tibble()%>%
filter(curvature<0)%>%
mutate(peaks=round(crit.pts,0))
return(f$peaks)
}
pseed.max <- pseed.wide%>%
group_by(fish,speed)%>%
mutate(peak=frame %in% find.peaks(frame,amp.sum))%>%
filter(peak==T)
pseed.sum.max<- pseed.max %>%
group_by(fish, speed) %>%
summarize(amp.sum.mean=mean(amp.sum))
##2
##Creating new function
se <- function(x)
{
sd(x)/ sqrt(length(x))
}
##
pseed.sum.se <- pseed.max%>%
group_by(fish,speed)%>%
summarize(amp.sum.se = se(amp.sum))
pseed.sum.max <- pseed.sum.max %>%
left_join(pseed.sum.se, by = c("speed","fish"))
pd <- position_dodge(0.1)
pseed.sum.max %>%
ggplot(aes(x=speed,y=amp.sum.mean,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width=0.5, colour="black", position=pd)+theme_classic()
##Plot
pseed.met.rate <- read_csv("pseed.met.rate.csv")
pseed.max <- pseed.max%>%
merge(pseed.met.rate,by=c("fish","date","m.s","cm.s","bl.s"))
pseed.mean.rate <- pseed.max %>%
group_by(fish, speed)%>%
summarize(amp.met.rate=mean(met.rate))
pseed.sum.max <- pseed.sum.max %>%
left_join(pseed.mean.rate, by = c("speed","fish"))
##Merging
pseed.sum.max %>%
ggplot(aes(x=amp.met.rate,y=amp.sum.mean,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width=0.05, colour="black", position=pd)+theme_classic()
##Plot
position_dodge(width = NULL, preserve = c("total", "single"))
position_dodge2(
width = NULL,
preserve = c("total", "single"),
padding = 0.1,
reverse = FALSE
)
pd <- position_dodge(0.1)
pseed.sum.max %>%
ggplot(aes(x=speed,y=amp.sum.mean,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width=0.5, colour="black", position=pd)+theme_classic()
##Plot
pseed.met.rate <- read_csv("pseed.met.rate.csv")
pseed.max <- pseed.max%>%
merge(pseed.met.rate,by=c("fish","date","m.s","cm.s","bl.s"))
pseed.mean.rate <- pseed.max %>%
group_by(fish, speed)%>%
summarize(amp.met.rate=mean(met.rate))
library(ggplot2)
library(tidyverse)
library(features)
pseed <- read_csv("pseed.fin.amps.csv")
pseed.bl <- read_csv("pseed.lengths.csv")
speeds <- read_csv("pseed.calibration.csv")
## Import data and libraries
pseed.wide <- pseed %>%
left_join(speeds,by=c("speed"="vol"))%>%
left_join(pseed.bl,by="fish")%>%
mutate(bl.s=cm.s/bl)%>%
select(-amp)%>%
pivot_wider(names_from = fin,values_from = amp.bl) %>%
mutate(amp.sum=L+R)
##Joining data
find.peaks <- function(x,y,mult=100)
{
f <- fget(features(x = x,y=y*mult))[2:3]%>%
as_tibble()%>%
filter(curvature<0)%>%
mutate(peaks=round(crit.pts,0))
return(f$peaks)
}
pseed.max <- pseed.wide%>%
group_by(fish,speed)%>%
mutate(peak=frame %in% find.peaks(frame,amp.sum))%>%
filter(peak==T)
pseed.sum.max<- pseed.max %>%
group_by(fish, speed) %>%
summarize(amp.sum.mean=mean(amp.sum))
##2
##Creating new function
se <- function(x)
{
sd(x)/ sqrt(length(x))
}
##
pseed.sum.se <- pseed.max%>%
group_by(fish,speed)%>%
summarize(amp.sum.se = se(amp.sum))
pseed.sum.max <- pseed.sum.max %>%
left_join(pseed.sum.se, by = c("speed","fish"))
pd <- position_dodge(0.1)
pseed.sum.max %>%
ggplot(aes(x=speed,y=amp.sum.mean,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width=0.5, colour="black", position=pd)+theme_classic()
##Plot
pseed.met.rate <- read_csv("pseed.met.rate.csv")
##Data
pseed.max <- pseed.max%>%
merge(pseed.met.rate,by=c("fish","date","m.s","cm.s","bl.s"))
pseed.mean.rate <- pseed.max %>%
group_by(fish, speed)%>%
summarize(amp.met.rate=mean(met.rate))
pseed.sum.max <- pseed.sum.max %>%
left_join(pseed.mean.rate, by = c("speed","fish"))
##Merging
pseed.sum.max %>%
ggplot(aes(x=amp.met.rate,y=amp.sum.mean,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width=0.05, colour="black", position=pd)+theme_classic()
##Plot
# Module 2 - Jenna Wilken
library(tidyverse)
library(ggplot2)
library(features)
pseed <- read_csv("pseed.fin.amps.csv")
pseed.bl <- read_csv("pseed.lengths.csv")
speeds <- read_csv("pseed.calibration.csv")
pseed2 <- pseed%>%
left_join(speeds,by=c("speed"="vol"))%>%
print()
pseed.bl%>%
print()
pseed2%>%
select(fish) %>%
unique()
pseed2 <- pseed2%>%
left_join(pseed.bl,by="fish")%>%
print()
pseed2 <- pseed2%>%
mutate(bl.s=cm.s/bl)%>%
print()
pseed2 %>%
filter(fin=="R")
pseed.wide <- pseed2 %>%
select(-amp)%>%
pivot_wider(names_from = fin,values_from = amp.bl) %>%
mutate(amp.sum=L+R)%>%
print()
find.peaks <- function(x,y,mult=100){
f <- fget(features(x = x,y=y*mult))[2:3]%>%
as_tibble()%>%
filter(curvature<0)%>%
mutate(peaks=round(crit.pts,0))
return(f$peaks)
}
pseed.max <- pseed.wide%>%
group_by(fish,speed)%>%
mutate(peak=frame %in% find.peaks(frame,amp.sum))%>%
filter(peak==T)
pseed.max$peak <- NULL
pseed.sum.max<- pseed.max %>%
group_by(fish, speed) %>%
summarize(amp.sum.mean=mean(amp.sum))
#3 Create a custom function that computes the standard error of the mean (SE).
SD <- function(x){
sd(x)/ sqrt(length(x))
}
pseed.sum.se <- pseed.max%>%
group_by(fish,speed)%>%
summarize(amp.sum.se = SE(amp.sum))
library(ggplot2)
library(tidyverse)
library(features)
pseed <- read_csv("pseed.fin.amps.csv")
pseed.bl <- read_csv("pseed.lengths.csv")
speeds <- read_csv("pseed.calibration.csv")
## Import data and libraries
pseed.wide <- pseed %>%
left_join(speeds,by=c("speed"="vol"))%>%
left_join(pseed.bl,by="fish")%>%
mutate(bl.s=cm.s/bl)%>%
select(-amp)%>%
pivot_wider(names_from = fin,values_from = amp.bl) %>%
mutate(amp.sum=L+R)
##Joining data
find.peaks <- function(x,y,mult=100)
{
f <- fget(features(x = x,y=y*mult))[2:3]%>%
as_tibble()%>%
filter(curvature<0)%>%
mutate(peaks=round(crit.pts,0))
return(f$peaks)
}
pseed.max <- pseed.wide%>%
group_by(fish,speed)%>%
mutate(peak=frame %in% find.peaks(frame,amp.sum))%>%
filter(peak==T)
pseed.max$peak <- NULL
pseed.sum.max<- pseed.max %>%
group_by(fish, speed) %>%
summarize(amp.sum.mean=mean(amp.sum))
##2
##Creating new function
se <- function(x)
{
sd(x)/ sqrt(length(x))
}
##
pseed.sum.se <- pseed.max%>%
group_by(fish,speed)%>%
summarize(amp.sum.se = se(amp.sum))
pseed.sum.max <- pseed.sum.max %>%
left_join(pseed.sum.se, by = c("speed","fish"))
pd <- position_dodge(0.1)
pseed.sum.max %>%
ggplot(aes(x=speed,y=amp.sum.mean,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width=0.5, colour="black", position=pd)+theme_classic()
##Plot
pseed.met.rate <- read_csv("pseed.met.rate.csv")
##Data
pseed.max <- pseed.max%>%
merge(pseed.met.rate,by=c("fish","date","m.s","cm.s","bl.s"))
pseed.mean.rate <- pseed.max %>%
group_by(fish, speed)%>%
summarize(amp.met.rate=mean(met.rate))
pseed.sum.max <- pseed.sum.max %>%
left_join(pseed.mean.rate, by = c("speed","fish"))
##Merging
pseed.sum.max %>%
ggplot(aes(x=amp.met.rate,y=amp.sum.mean,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width=0.05, colour="black", position=pd)+theme_classic()
##Plot
license()
#Left side is predicted by ~ Right side
set.seed(123)
x.A=1:50
y.A=x.A*2+runif(50,1,200)
x.B=1:50
y.B=x.B*3.5+runif(50,1,200)
d <- tibble(x=c(x.A,x.B), y=c(y.A,y.B), species = c(rep("A",50),rep("B",50)))
#Left side is predicted by ~ Right side
library(tidyverse)
set.seed(123)
x.A=1:50
y.A=x.A*2+runif(50,1,200)
x.B=1:50
y.B=x.B*3.5+runif(50,1,200)
d <- tibble(x=c(x.A,x.B), y=c(y.A,y.B), species = c(rep("A",50),rep("B",50)))
lm(y~x*d)
library(tidyverse)
library(modelr)
options(na.action = na.warn)
ggplot(sim1, aes(x, y)) +
geom_point()
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a1, slope = a2), data = models, alpha = 1/4) +
geom_point()
model1 <- function(a, data) {
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
library(tidyverse)
library(modelr)
options(na.action = na.warn)
ggplot(sim1, aes(x, y)) +
geom_point()
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a1, slope = a2), data = models, alpha = 1/4) +
geom_point()
model1 <- function(a, data) {
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, colour = -dist),
data = filter(models, rank(dist) <= 10)
)
library(tidyverse)
library(modelr)
options(na.action = na.warn)
ggplot(sim1, aes(x, y)) +
geom_point()
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
ggplot(sim1, aes(x, y)) +
geom_abline(aes(intercept = a1, slope = a2), data = models, alpha = 1/4) +
geom_point()
model1 <- function(a, data) {
a[1] + data$x * a[2]
}
model1(c(7, 1.5), sim1)
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, colour = -dist),
data = filter(models, rank(dist) <= 10)
)
measure_distance <- function(mod, data) {
diff <- data$y - model1(mod, data)
sqrt(mean(diff ^ 2))
}
measure_distance(c(7, 1.5), sim1)
sim1_dist <- function(a1, a2) {
measure_distance(c(a1, a2), sim1)
}
models <- models %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
models
ggplot(models, aes(a1, a2)) +
geom_point(data = filter(models, rank(dist) <= 10), size = 4, colour = "red") +
geom_point(aes(colour = -dist))
grid <- expand.grid(
a1 = seq(-5, 20, length = 25),
a2 = seq(1, 3, length = 25)
) %>%
mutate(dist = purrr::map2_dbl(a1, a2, sim1_dist))
grid %>%
ggplot(aes(a1, a2)) +
geom_point(data = filter(grid, rank(dist) <= 10), size = 4, colour = "red") +
geom_point(aes(colour = -dist))
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(
aes(intercept = a1, slope = a2, colour = -dist),
data = filter(grid, rank(dist) <= 10)
)
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(intercept = best$par[1], slope = best$par[2])
best <- optim(c(0, 0), measure_distance, data = sim1)
best$par
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") +
geom_abline(intercept = best$par[1], slope = best$par[2])
best <- optim(c(0, 0), measure_distance, data = sim1)
best$par
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey50") +
geom_abline(intercept = best$par[1], slope = best$par[2])
find.peaks <- function(x,y,mult=100)
{
f <- fget(features(x = x,y=y*mult))[2:3]%>%
as_tibble()%>%
filter(curvature<0)%>%
mutate(peaks=round(crit.pts,0))
return(f$peaks)
}
library(ggplot2)
library(tidyverse)
library(features)
pseed <- read_csv("pseed.fin.amps.csv")
pseed.bl <- read_csv("pseed.lengths.csv")
speeds <- read_csv("pseed.calibration.csv")
## Import data and libraries
pseed.wide <- pseed %>%
left_join(speeds,by=c("speed"="vol"))%>%
left_join(pseed.bl,by="fish")%>%
mutate(bl.s=cm.s/bl)%>%
select(-amp)%>%
pivot_wider(names_from = fin,values_from = amp.bl) %>%
mutate(amp.sum=L+R)
##Joining data
find.peaks <- function(x,y,mult=100)
{
f <- fget(features(x = x,y=y*mult))[2:3]%>%
as_tibble()%>%
filter(curvature<0)%>%
mutate(peaks=round(crit.pts,0))
return(f$peaks)
}
pseed.max <- pseed.wide%>%
group_by(fish,speed)%>%
mutate(peak=frame %in% find.peaks(frame,amp.sum))%>%
filter(peak==T)
